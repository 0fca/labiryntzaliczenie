/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package labiryntzaliczenie.gui;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.util.HashMap;
import java.util.Random;
import javax.swing.JLabel;
import javax.swing.JPanel;

/**
 *
 * @author Obsidiam
 */
public class MainWindow extends javax.swing.JFrame {
    private int X,Y = 0;
    private final String SOUTH = java.awt.BorderLayout.SOUTH;
    private final String NORTH = java.awt.BorderLayout.NORTH;
    private final String EAST = java.awt.BorderLayout.EAST;
    private final String WEST = java.awt.BorderLayout.WEST;
    private static HashMap<Integer,String> MAP = new HashMap<>();
    private int count = 0;
    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
        this.X = this.getWidth();
        this.Y = this.getHeight();
        prepareMap();
        prepareMaze();
    }

    {
        MAP.put(1, NORTH);
        MAP.put(2, EAST);
        MAP.put(3, SOUTH);
        MAP.put(4, WEST);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setExtendedState(6);
        setSize(new java.awt.Dimension(900, 500));

        jPanel1.setLayout(new java.awt.GridLayout(10, 20));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new MainWindow().setVisible(true);
        });
    }

    private void prepareMap() {
        for(int ix = 1; ix <= 200; ix++){
                Cell c = new Cell();
                for(int i = 1; i <= 4; i++){
                    c.setWall(new Wall(), MAP.get(i));
                }
                jPanel1.add(c);
        }
    }

    private void prepareMaze(){
        //dfs(jPanel1);
    }
    
    private void dfs(JPanel j) {
        while(count < j.getComponentCount()-1){
           
            for (Component comp : j.getComponents()) {
                Cell cell = (Cell)comp;
                Cell next = (Cell)j.getComponents()[count + 1];
                
                if (!cell.isVisited()) {
                    Random rand = new Random();
                    int w = rand.nextInt();
                    cell.removeWall(w);
                    switch(w){
                        case 0:
                            next.removeWall(Math.abs(w-3));
                            break;
                        case 1:
                            next.removeWall(Math.abs(w-2));
                            break;
                        case 2:
                            next.removeWall(Math.abs(w-2));
                            break;
                        case 3:
                            next.removeWall(Math.abs(w-3));
                            break;
                    }
                    count++;
                }
            }
        }
    }
  
    public class Cell extends JPanel{
        private boolean isVisited = false;

        {
            this.setSize(100, 100);
            this.setLayout(new BorderLayout());
            this.setBackground(Color.red);
        }

        public void setWall(Wall w, String pos){
            System.out.println(pos);
            this.add(w, pos);
        }
        
        public void removeWall(int i){
            this.remove(i);
        }
        
        public boolean isVisited(){
            return isVisited;
        }
        
        public void setVisited(boolean visited){
            this.isVisited = visited;
        }
        public int getCompCount(){
            return this.getComponentCount();
        }
    }
    
    public class Wall extends JLabel{
       
        private int X = 10;
        private int Y = 10;
        
        {
            this.setOpaque(true);
            this.setPreferredSize(new Dimension(X,Y));
            this.setBackground(Color.BLACK);
            //this.setText("text");
        }
        
        private int getCellX(){
            return X;
        }
        
        private int getCellY(){
            return Y;
        }
        
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
